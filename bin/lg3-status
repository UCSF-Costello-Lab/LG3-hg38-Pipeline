#! /usr/bin/env bash
### Check Status of Running LG3 Pipeline
###
### Usage:
###  lg3 status [options] <patient> <patient2> ...
###
### Options:
###  --conv=<pathame>  The path to the tab-delimited patient file
###  --bam=(<string>)  Raw BAM files suffix
###  --fq              Check raw FASTQ files
###  --trim            Check trimmed FASTQ files
###  --bwa             Check aligned BAM files
###  --germline        Check germline output
###  --mutect2         Check Mutect output
###  --all             Check all outputs (default)
###  --fac             Check FACETS outputs
###
### Examples:
###  lg3 status --all Patient157t10
###

# shellcheck source=scripts/utils.sh
source "${LG3_HOME:?}/scripts/utils.sh"
source_lg3_conf

LG3_OUTPUT_ROOT=${LG3_OUTPUT_ROOT:-output}
PROJECT=${PROJECT:-LG3}
CONV=${CONV:-patient_ID_conversions.tsv}

BAM_SUFF=${RECAL_BAM_EXT}.bam
#BAM_SUFF=${RECAL_BAM_EXT}.insert_size_metrics

## Colors and colored messages
RED='\033[0;31m'
GRN='\033[0;32m'
YEL='\033[0;33m'
NOC='\033[0m'
OK="$GRN OK$NOC"
ERR="$RED missing$NOC"
SEP="$YEL******$NOC"

ALL=true
FQ=false
TRIM=false
BWA=false
GL=false
MUT=false
FAC=false

wcl() {
    grep -vc "^#" "$1" 
}

## Parse optional args
while [ -n "$1" ]; do
case $1 in
    --conv*=*) CONV=${1#*=};shift 1;;
    --bam*=*) BAM_SUFF=${1#*=};shift 1;;
    --all) ALL=true;shift 1;;

    --fq) FQ=true;ALL=false;shift 1;;
    --trim) TRIM=true;ALL=false;shift 1;;
    --bwa) BWA=true;ALL=false;shift 1;;
    --g*) GL=true;ALL=false;shift 1;;
    --mut*) MUT=true;ALL=false;shift 1;;
    --fac) FAC=true;ALL=false;shift 1;;
    --*) echo "error: no such option $1";exit 1;;
    *)  break;;
esac
done

if $ALL ; then
    FQ=true
    TRIM=true
    BWA=true
    GL=true
    MUT=true
	 AVF=true
	 FAC=true
fi

PATIENTS=${*:-Patient157t10}

echo -e "Checking output for project ${PROJECT}"
echo "Patient/samples table ${CONV}"
echo "BAM suffix ${BAM_SUFF}"
echo "Patients ${PATIENTS:?}"

for PATIENT in "${PATIENTS[@]}"
do
    [[ "${PATIENT}" == *[_]* ]] && { echo "ERROR: 'PATIENT' must not contain underscores: ${PATIENT}"; exit 1; }
    normid="$ERR"
    echo -e -n "$SEP Checking ${YEL}${PATIENT}${NOC}"
    ## Pull out PATIENT specific conversion info
    grep -w "${PATIENT}" "${CONV}" > "${PATIENT}.temp.conversions.txt"
    ## Get normal ID
    while IFS=$'\t' read -r ID _ _ SAMP
    do
        if [ "$SAMP" = "Normal" ]; then
            normid=${ID}
            break
        fi
    done < "${PATIENT}.temp.conversions.txt"
    echo -e " Normal: $normid"

if $FQ ; then
    WORKDIR=rawdata
    ## Cycle through samples and check fastq files
    while IFS=$'\t' read -r ID _ _ SAMP
    do
        ### Expected output
        OUTs=("${WORKDIR}/${ID}_R1"*.fastq.gz)
        OUT=${OUTs[0]}
        if [ -s "$OUT" ]; then
            echo -e "Fastq $ID $OK"
        else
            echo -e "Fastq $ID $ERR"
        fi
    done < "${PATIENT}.temp.conversions.txt"
fi

if $TRIM ; then
    WORKDIR=${LG3_OUTPUT_ROOT}/${PROJECT}/trim
    ## Backward compatibility
    if [ ! -d "${WORKDIR}" ]; then WORKDIR=output; fi
    ## Cycle through samples and check trim-galore output
    while IFS=$'\t' read -r ID _ _ SAMP
    do
        ### Expected output
        OUT=${WORKDIR}/${ID}-trim/${ID}-trim_R1.fastq.gz
        if [ -r "$OUT" ]; then
            echo -e "Trim $ID $OK"
        else
            echo -e "Trim $ID $ERR"
        fi
    done < "${PATIENT}.temp.conversions.txt"
fi

if $BWA ; then
    WORKDIR=${LG3_OUTPUT_ROOT}/${PROJECT}/bwa-mem
    ## Cycle through samples and check BWA
    while IFS=$'\t' read -r ID _ _ SAMP
    do
        ### Expected output
        #OUT=${WORKDIR}/${PATIENT}/${ID}_final.bam.flagstat
        OUT=${WORKDIR}/${PATIENT}/${ID}.bwa.mrkDups.sort.recal.flagstat
        if [ -s "$OUT" ]; then
            echo -e "BWA $ID $OK"
        else
            echo -e "BWA $ID $ERR"
        fi
    done < "${PATIENT}.temp.conversions.txt"
fi

if $GL ; then
    WORKDIR=${LG3_OUTPUT_ROOT}/${PROJECT}/bwa-mem/${PATIENT}/germline
    OUT=${WORKDIR}/${PATIENT}.filtered.snps.vcf
    if [ -s "$OUT" ]; then
        LCNT=$(wcl "$OUT")
        echo -e "Germline $OK ${YEL}${LCNT}${NOC}"
    else
        echo -e "Germline $ERR"
    fi

    ## Cycle through tumors and check Germline output
    while IFS=$'\t' read -r ID _ _ SAMP
    do
        if [ "$ID" == "$normid" ]; then continue; fi

        ### Expected output
        OUT=${WORKDIR}/NOR-${normid}_vs_${ID}.germline
        if [ -s "$OUT" ]; then
				RET=$(cut -f3 -d\( "$OUT" | tail -n +2 | sed 's/)//')
            echo -e "Germline $ID $OK ${YEL}${RET}${NOC}"
        else
            echo -e "Germline $ID $ERR"
        fi
    done < "${PATIENT}.temp.conversions.txt"
fi

if $MUT ; then
    WORKDIR=${LG3_OUTPUT_ROOT}/${PROJECT}/mutations/${PATIENT}_mutect2
    ## Cycle through tumors and check MUTECT output
    while IFS=$'\t' read -r ID _ _ SAMP
    do
        if [ "$SAMP" = "Normal" ]; then
            continue
        elif [ "${SAMP:0:2}" = "ML" ]; then
            samp_label="ML"
        elif [ "${SAMP:0:3}" = "GBM" ]; then
            samp_label="GBM"
        elif [ "${SAMP:0:3}" = "Pri" ]; then
            samp_label="TUM"
        elif [ "${SAMP:0:3}" = "Tum" ]; then
            samp_label="TUM"
        elif [ "${SAMP:0:11}" = "Recurrence1" ]; then
            samp_label="REC1"
        elif [ "${SAMP:0:11}" = "Recurrence2" ]; then
            samp_label="REC2"
        elif [ "${SAMP:0:11}" = "Recurrence3" ]; then
            samp_label="REC3"
        elif [ "${SAMP:0:5}" == "tumor" ]; then
            samp_label="unkTUM"
        else
            samp_label="TUM"
        fi
    
        ## Expected output:
        OUT=${WORKDIR}/NOR-${normid}__${samp_label}-${ID}.variants.funcotated.tsv
        if [ -s "$OUT" ]; then
            LCNT=$(wcl "$OUT")
            echo -e "Mutect2 $ID $OK ${YEL}${LCNT}${NOC}"
        else
            echo -e "Mutect2 $ID $ERR"
        fi
    
    done < "${PATIENT}.temp.conversions.txt"
fi


   if $FAC ; then
      WORKDIR=${LG3_OUTPUT_ROOT}/${PROJECT}/facets/${PATIENT}
      ## Expected output:
      OUT=${WORKDIR}/FACETS.txt
      if [ -s "$OUT" ]; then
         LCNT=$(wcl "$OUT")
         echo -e "FACETS $OK ${YEL}${LCNT}${NOC}"
      else
         echo -e "FACETS $ERR"
      fi
   fi


## Delete PATIENT specific conversion file
rm "${PATIENT}.temp.conversions.txt"

done
